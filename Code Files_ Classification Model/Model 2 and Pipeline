{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":11065446,"sourceType":"datasetVersion","datasetId":6895146}],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true},"colab":{"provenance":[{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/natalie-bertclassifier319-ce9cfa24-698e-4f26-a34b-362ecae9caa9.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20250320/auto/storage/goog4_request&X-Goog-Date=20250320T005001Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=a5dd306eae2b61fa3aab4157b8c437f285be8f9ddf3c4fa35cf6188108414607da1b3c9db5b5e18bc72f1fb4ace37986ea9b41c749165b87748be2b2b8d6f2437096f6f244a35fefe7e3986ff094bf405e57a99a4a4a82b93e2cb1c93d8b1732bd7ac30a5bf20ec45e7469b2ccfee8297d8b5acb7fb3672bf0576fcfe14d37e1c6366ed822fc74cad9f547b66dd1aa65f98e5769c6d4557cd428fd23ca37f7f9459fe571f05900df35437de7b1cba630e0656c0edfe9acb0c39bc808892b03c7dbcbd55ea82ccbb9eb4c30637136c0010b3e4a0d8f44c2b724818676f344c77f46e693fd98ee1951c73d3f2044732bdf61cf7126edd7268b69a1c3888d96fc55","timestamp":1742431861559}]}},"nbformat_minor":0,"nbformat":4,"cells":[{"cell_type":"markdown","source":["Group 5\n","\n","Julia Aptekar, DePaul University, japtekar@depaul.edu\n","\n","John Leniart, DePaul University, jleniart@depaul.edu\n","\n","Arham Mehdi, DePaul University kmehdi@depaul.edu\n","\n","Natalie Olechno, DePaul University, nolechno@depaul.edu\n","\n","\n","**Model 2**"],"metadata":{"id":"ob7s-bIZDCAs"}},{"cell_type":"code","source":["# !jupyter nbconvert --to html /content/drive/MyDrive/DSC\\ 672/Code\\ Files:\\ Classification\\ Model/Model_2_and_Pipeline.ipynb"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hL_kSdrHE-wC","executionInfo":{"status":"ok","timestamp":1742433941034,"user_tz":300,"elapsed":6451,"user":{"displayName":"Natalie","userId":"09125566985353869914"}},"outputId":"7e554951-fc3e-4dbf-cad2-71694179ef0b"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["[NbConvertApp] Converting notebook /content/drive/MyDrive/DSC 672/Code Files: Classification Model/Model_2_and_Pipeline.ipynb to html\n","[NbConvertApp] WARNING | Alternative text is missing on 1 image(s).\n","[NbConvertApp] Writing 597165 bytes to /content/drive/MyDrive/DSC 672/Code Files: Classification Model/Model_2_and_Pipeline.html\n"]}]},{"cell_type":"code","source":["#README\n","#With Kaggle connect to GPU P100 or GPU T4X2\n","#With Google Colab connect to GPU T4X2"],"metadata":{"id":"DmItw4hACtUM"},"execution_count":null,"outputs":[]},{"source":["# IMPORTANT: SOME KAGGLE DATA SOURCES ARE PRIVATE\n","# RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES.\n","import kagglehub\n","kagglehub.login()\n"],"metadata":{"id":"p1XC0wQmB1by"},"cell_type":"code","outputs":[],"execution_count":null},{"source":["# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,\n","# THEN FEEL FREE TO DELETE THIS CELL.\n","# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n","# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n","# NOTEBOOK.\n","\n","nat7574_combined_data_path = kagglehub.dataset_download('nat7574/combined-data')\n","\n","print('Data source import complete.')\n"],"metadata":{"id":"KGiy8CtYB1bz"},"cell_type":"code","outputs":[],"execution_count":null},{"cell_type":"code","source":["#from google.colab import drive\n","#drive.mount('/content/drive')\n","\n","#file_1 = '/content/drive/MyDrive/Data Science Capstone/Original Data/Combined Data.xlsx'\n","#data = pd.read_excel(file_1)"],"metadata":{"id":"-V1kpCLOB91y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import re\n","import random\n","import time\n","import datetime\n","from collections import Counter\n","\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","from torch.utils.data import Dataset, DataLoader, TensorDataset, random_split, RandomSampler, WeightedRandomSampler, Subset, SequentialSampler\n","\n","from transformers import BertTokenizer, BertModel, BertForSequenceClassification, Trainer, TrainingArguments\n","from transformers import AdamW, get_linear_schedule_with_warmup\n","\n","from sklearn.metrics import f1_score\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.model_selection import train_test_split"],"metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-03-19T22:49:37.626323Z","iopub.execute_input":"2025-03-19T22:49:37.626603Z","iopub.status.idle":"2025-03-19T22:50:00.396915Z","shell.execute_reply.started":"2025-03-19T22:49:37.626573Z","shell.execute_reply":"2025-03-19T22:50:00.396Z"},"id":"E6j49_HYB1b0"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["BERT model with huggingface PyTorch library classification of program descriptions to outcome, genome, and impact area."],"metadata":{"id":"BOeLYs1eB1b0"}},{"cell_type":"code","source":["import os\n","os.listdir('/kaggle/input/')\n","#os.listdir"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T22:50:00.398268Z","iopub.execute_input":"2025-03-19T22:50:00.399192Z","iopub.status.idle":"2025-03-19T22:50:00.4124Z","shell.execute_reply.started":"2025-03-19T22:50:00.399167Z","shell.execute_reply":"2025-03-19T22:50:00.411815Z"},"id":"PUxKAcOFB1b2","outputId":"bc5da447-9c60-4c1d-a632-5982b6866e66"},"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"['Combined Data.xlsx']"},"metadata":{}}],"execution_count":null},{"cell_type":"code","source":["device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","print(f\"Using device: {device}\")"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T22:50:00.413427Z","iopub.execute_input":"2025-03-19T22:50:00.413669Z","iopub.status.idle":"2025-03-19T22:50:00.484614Z","shell.execute_reply.started":"2025-03-19T22:50:00.41365Z","shell.execute_reply":"2025-03-19T22:50:00.483797Z"},"id":"qpeti37-B1b3","outputId":"8e7b0ee8-e907-4f73-89b0-6d3f65040a63"},"outputs":[{"name":"stdout","text":"Using device: cuda\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":["input_file='/kaggle/input/Combined Data.xlsx'\n","print(f\"Loading data from {input_file}\")\n","data = pd.read_excel(input_file)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T22:50:00.485328Z","iopub.execute_input":"2025-03-19T22:50:00.48564Z","iopub.status.idle":"2025-03-19T22:50:02.092959Z","shell.execute_reply.started":"2025-03-19T22:50:00.485608Z","shell.execute_reply":"2025-03-19T22:50:02.091992Z"},"id":"EP1-jim-B1b4","outputId":"373ca2d4-8d47-4942-99b1-350d653545c6"},"outputs":[{"name":"stdout","text":"Loading data from /kaggle/input/Combined Data.xlsx\n","output_type":"stream"}],"execution_count":null},{"cell_type":"markdown","source":["Pre-processing"],"metadata":{"id":"Z_CuI0IeB1b5"}},{"cell_type":"code","source":["data.dropna(inplace=True)\n","data['outcomeid'] = data['outcomeid'].astype(int) #float to int\n","#remove special characters from program description\n","#leave only letters, numbers, and some punctutation marks (colon, period, comma, apostraphe, hyphen)\n","data['programdescription'] = data['programdescription'].apply(lambda x: re.sub(r\"[^A-Za-z0-9 :.,'-]+\", \"\", x))\n","\n","#mapping dict from outcomeid to outcome\n","outcomeid_to_outcome = dict(zip(data['outcomeid'], data['outcome']))"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T22:50:02.0939Z","iopub.execute_input":"2025-03-19T22:50:02.094363Z","iopub.status.idle":"2025-03-19T22:50:02.217979Z","shell.execute_reply.started":"2025-03-19T22:50:02.09434Z","shell.execute_reply":"2025-03-19T22:50:02.217306Z"},"id":"G2Xucas4B1b6"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["#encode labels (not consecutive)\n","#outcome encoder\n","outcome_encoder = LabelEncoder()\n","data['encoded_outcome_labels'] = outcome_encoder.fit_transform(data['outcomeid'])\n","num_outcome_labels = len(outcome_encoder.classes_)\n","print(f\"Number of outcome labels: {num_outcome_labels}\")\n","\n","#genome encoder\n","genome_encoder = LabelEncoder()\n","data['encoded_genome_labels'] = genome_encoder.fit_transform(data['genome'])\n","num_genome_labels = len(genome_encoder.classes_)\n","print(f\"Number of genome labels: {num_genome_labels}\")\n","\n","#impactarea encoder\n","impactarea_encoder = LabelEncoder()\n","data['encoded_impactarea_labels'] = impactarea_encoder.fit_transform(data['impactarea'])\n","num_impactarea_labels = len(impactarea_encoder.classes_)\n","print(f\"Number of impact area labels: {num_impactarea_labels}\")"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T22:50:02.219813Z","iopub.execute_input":"2025-03-19T22:50:02.220018Z","iopub.status.idle":"2025-03-19T22:50:02.232507Z","shell.execute_reply.started":"2025-03-19T22:50:02.22Z","shell.execute_reply":"2025-03-19T22:50:02.23182Z"},"id":"l5Nq90l-B1b6","outputId":"2f29a4aa-3d02-4956-d36d-6e02e9adff20"},"outputs":[{"name":"stdout","text":"Number of outcome labels: 289\nNumber of genome labels: 50\nNumber of impact area labels: 12\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":["#extract sentences and labels as numpy ndarrays\n","sentences = data['programdescription'].tolist()\n","olabels = torch.tensor(data['encoded_outcome_labels'].tolist())\n","glabels=torch.tensor(data['encoded_genome_labels'].tolist())\n","ialabels=torch.tensor(data['encoded_impactarea_labels'].tolist())"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T22:50:02.234156Z","iopub.execute_input":"2025-03-19T22:50:02.234378Z","iopub.status.idle":"2025-03-19T22:50:02.244561Z","shell.execute_reply.started":"2025-03-19T22:50:02.234357Z","shell.execute_reply":"2025-03-19T22:50:02.243654Z"},"id":"6oAfyV6WB1b6"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["To apply pre-trained BERT, data must be tokenized with BERT tokenizer.\n","\n","Formatting for BERT\n","- All sentences must be single fixed length\n","- Max sentence length is 512 tokens\n","\n","Tokenization and create TensorDataset"],"metadata":{"id":"x02wtQxyB1b7"}},{"cell_type":"code","source":["#load tokenizer and model\n","tokenizer = BertTokenizer.from_pretrained(\"bert-base-uncased\", do_lower_case=True)\n","\n","def tokenize_data(sentences, max_length=240):\n","    input_ids = []\n","    attention_masks = []\n","    for sent in sentences:\n","        encoded_dict = tokenizer.encode_plus(\n","            sent,\n","            add_special_tokens=True, #add [cls] and [sep]\n","            max_length=max_length, #pad/truncate sentences\n","            pad_to_max_length=True,\n","            return_attention_mask=True,\n","            return_tensors='pt'\n","        )\n","        input_ids.append(encoded_dict['input_ids']) #add encoded sentence to list\n","        attention_masks.append(encoded_dict['attention_mask']) #add attention mask\n","\n","    #convert lists to tensors\n","    return torch.cat(input_ids), torch.cat(attention_masks)\n","\n","#apply tokenization\n","input_ids, attention_masks = tokenize_data(sentences)\n","\n","#convert labels to tensors\n","outcome_labels = torch.tensor(olabels)\n","genome_labels = torch.tensor(glabels)\n","ia_labels = torch.tensor(ialabels)\n","#create TensorDataset\n","dataset = TensorDataset(input_ids, attention_masks, outcome_labels, genome_labels, ia_labels)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T22:50:02.245207Z","iopub.execute_input":"2025-03-19T22:50:02.245473Z","iopub.status.idle":"2025-03-19T22:50:26.021476Z","shell.execute_reply.started":"2025-03-19T22:50:02.245454Z","shell.execute_reply":"2025-03-19T22:50:26.020596Z"},"id":"lmNK2fmVB1b7","outputId":"20f7d9bf-3ab4-4da0-a838-01da294afeb2","colab":{"referenced_widgets":["61966db8ba0947daa9fedc2277e7f238","1c225084e0124990a7264ec0ebc177df","8062fd85bfd04a70b8f55b3d8b4b1fe4","e77c8c03be354327bf08f29289d18952"]}},"outputs":[{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/48.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"61966db8ba0947daa9fedc2277e7f238"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1c225084e0124990a7264ec0ebc177df"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"8062fd85bfd04a70b8f55b3d8b4b1fe4"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/570 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e77c8c03be354327bf08f29289d18952"}},"metadata":{}},{"name":"stderr","text":"Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation=True` to explicitly truncate examples to max length. Defaulting to 'longest_first' truncation strategy. If you encode pairs of sequences (GLUE-style) with the tokenizer you can select this strategy more precisely by providing a specific strategy to `truncation`.\n/usr/local/lib/python3.10/dist-packages/transformers/tokenization_utils_base.py:2673: FutureWarning: The `pad_to_max_length` argument is deprecated and will be removed in a future version, use `padding=True` or `padding='longest'` to pad to the longest sequence in the batch, or use `padding='max_length'` to pad to a max length. In this case, you can give a specific length with `max_length` (e.g. `max_length=45`) or leave max_length to None to pad to the maximal input size of the model (e.g. 512 for Bert).\n  warnings.warn(\n<ipython-input-8-238ff336b92b>:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  outcome_labels = torch.tensor(olabels)\n<ipython-input-8-238ff336b92b>:27: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  genome_labels = torch.tensor(glabels)\n<ipython-input-8-238ff336b92b>:28: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  ia_labels = torch.tensor(ialabels)\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":["#count occurrences of each outcome label\n","label_counts = Counter(outcome_labels.numpy())\n","#print(label_counts)\n","#check if any class has only 1 sample\n","min_class_size = min(label_counts.values())\n","#print(min_class_size)\n","#decide whether to use stratification\n","stratify_option = outcome_labels.numpy() if min_class_size > 1 else None\n","#print(stratify_option)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T22:50:26.022207Z","iopub.execute_input":"2025-03-19T22:50:26.022418Z","iopub.status.idle":"2025-03-19T22:50:26.028705Z","shell.execute_reply.started":"2025-03-19T22:50:26.0224Z","shell.execute_reply":"2025-03-19T22:50:26.027922Z"},"id":"-1Ou0OL9B1b7"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["train_idx, val_idx = train_test_split(\n","    range(len(dataset)),\n","    test_size=0.2,\n","    random_state=42,\n","    stratify=stratify_option\n",")\n","#use indices to split the dataset\n","train_dataset = TensorDataset(\n","    input_ids[train_idx],\n","    attention_masks[train_idx],\n","    outcome_labels[train_idx],\n","    genome_labels[train_idx],\n","    ia_labels[train_idx]\n",")\n","val_dataset = TensorDataset(\n","    input_ids[val_idx],\n","    attention_masks[val_idx],\n","    outcome_labels[val_idx],\n","    genome_labels[val_idx],\n","    ia_labels[val_idx]\n",")\n","\n","print(f\"Training samples: {len(train_dataset)}\")\n","print(f\"Validation samples: {len(val_dataset)}\")"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T22:50:26.029496Z","iopub.execute_input":"2025-03-19T22:50:26.029844Z","iopub.status.idle":"2025-03-19T22:50:26.120064Z","shell.execute_reply.started":"2025-03-19T22:50:26.029793Z","shell.execute_reply":"2025-03-19T22:50:26.11908Z"},"id":"OCsAztIbB1b7","outputId":"d85b0ad7-ec92-4e07-e795-9d1f3c9c871b"},"outputs":[{"name":"stdout","text":"Training samples: 8680\nValidation samples: 2171\n","output_type":"stream"}],"execution_count":null},{"cell_type":"markdown","source":["create iterator using torch DataLoader to save on memory during training\n","\n","-with iterator datset doesn't need to be loaded into memory"],"metadata":{"id":"elmrtH59B1b7"}},{"cell_type":"code","source":["class HierarchicalBertClassifier(nn.Module):\n","    def __init__(self, num_impactarea_labels, num_genome_labels, num_outcome_labels, hidden_size=256, dropout_rate=0.3):\n","        super(HierarchicalBertClassifier, self).__init__()\n","        self.bert = BertModel.from_pretrained(\"bert-base-uncased\")\n","        self.dropout = nn.Dropout(dropout_rate)\n","\n","        #impact area prediction\n","        self.ia_hidden = nn.Sequential(\n","            nn.Linear(self.bert.config.hidden_size, hidden_size),\n","            nn.ReLU(),\n","            nn.Dropout(dropout_rate)\n","        )\n","        self.ia_classifier = nn.Linear(hidden_size, num_impactarea_labels)\n","        #layer to extract ia features\n","        self.ia_feature_extractor = nn.Linear(num_impactarea_labels, hidden_size)\n","\n","        #genome prediction (conditioned on impact area)\n","        self.genome_hidden = nn.Sequential(\n","            nn.Linear(self.bert.config.hidden_size + num_impactarea_labels, hidden_size),\n","            nn.ReLU(),\n","            nn.Dropout(dropout_rate)\n","        )\n","        self.genome_classifier = nn.Linear(hidden_size, num_genome_labels)\n","        #layer to extract genome features\n","        self.genome_feature_extractor = nn.Linear(num_genome_labels, hidden_size)\n","\n","        #outcome prediction (conditioned on impact area & genome)\n","        self.cross_attention = nn.MultiheadAttention(hidden_size, num_heads=4)\n","        self.outcome_hidden = nn.Sequential(\n","            nn.Linear(self.bert.config.hidden_size + num_impactarea_labels + num_genome_labels + hidden_size, hidden_size),\n","            nn.ReLU(),\n","            nn.Dropout(dropout_rate)\n","        )\n","        self.outcome_classifier = nn.Linear(hidden_size, num_outcome_labels)\n","\n","\n","    def forward(self, input_ids, attention_mask):\n","        bert_output = self.bert(input_ids=input_ids, attention_mask=attention_mask).pooler_output\n","        bert_output = self.dropout(bert_output)\n","\n","        #impact area prediction\n","        ia_hidden = self.ia_hidden(bert_output)\n","        ia_logits = self.ia_classifier(ia_hidden)\n","        #get probs for ia to pass to next level\n","        ia_probs= F.softmax(ia_logits, dim=1)\n","        #extract more features from ia probs\n","        ia_features = self.ia_feature_extractor(ia_probs)\n","\n","        #genome prediction (with impact area info)\n","        genome_input= torch.cat([bert_output, ia_probs], dim=1)\n","        genome_hidden= self.genome_hidden(genome_input)\n","        genome_logits= self.genome_classifier(genome_hidden)\n","        #get probs for genome to pass to next level\n","        genome_probs= F.softmax(genome_logits, dim=1)\n","\n","        #extract more features from genome probs\n","        genome_features= self.genome_feature_extractor(genome_probs)\n","\n","        #cross atttention between genome & ia features\n","        genome_features_reshaped=genome_features.unsqueeze(0)\n","        ia_features_reshaped= ia_features.unsqueeze(0)\n","\n","        attended_features, _ = self.cross_attention(\n","        genome_features_reshaped,  # query\n","        ia_features_reshaped,      # key\n","        ia_features_reshaped       # value\n","       )\n","        attended_features = attended_features.squeeze(0)\n","\n","        #outcome prediction\n","        outcome_input = torch.cat([bert_output, ia_probs, genome_probs, attended_features], dim=1)\n","        outcome_hidden = self.outcome_hidden(outcome_input)\n","        outcome_logits = self.outcome_classifier(outcome_hidden)\n","\n","        return ia_logits, genome_logits, outcome_logits\n","\n","    def predict(self, input_ids, attention_mask):\n","        ia_logits, genome_logits, outcome_logits = self.forward(input_ids, attention_mask)\n","\n","        ia_preds = torch.argmax(ia_logits, dim=1)\n","        genome_preds = torch.argmax(genome_logits, dim=1)\n","        outcome_preds = torch.argmax(outcome_logits, dim=1)\n","\n","        return ia_preds, genome_preds, outcome_preds\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T22:50:26.120982Z","iopub.execute_input":"2025-03-19T22:50:26.121209Z","iopub.status.idle":"2025-03-19T22:50:26.132051Z","shell.execute_reply.started":"2025-03-19T22:50:26.12119Z","shell.execute_reply":"2025-03-19T22:50:26.131071Z"},"id":"34f7N_1IB1b7"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["model = HierarchicalBertClassifier(\n","    num_impactarea_labels=12,\n","    num_genome_labels=50,\n","    num_outcome_labels=289,\n","    hidden_size=256,\n","    dropout_rate=0.3)\n","model.to(device)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T22:50:26.132753Z","iopub.execute_input":"2025-03-19T22:50:26.133043Z","iopub.status.idle":"2025-03-19T22:50:28.863303Z","shell.execute_reply.started":"2025-03-19T22:50:26.13301Z","shell.execute_reply":"2025-03-19T22:50:28.862555Z"},"id":"cIXIPVWwB1b8","outputId":"fa9429d0-fe38-4f7f-9c68-8546e563c198","colab":{"referenced_widgets":["5707dd598d964672baa521361503a24e"]}},"outputs":[{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/440M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5707dd598d964672baa521361503a24e"}},"metadata":{}},{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"HierarchicalBertClassifier(\n  (bert): BertModel(\n    (embeddings): BertEmbeddings(\n      (word_embeddings): Embedding(30522, 768, padding_idx=0)\n      (position_embeddings): Embedding(512, 768)\n      (token_type_embeddings): Embedding(2, 768)\n      (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n      (dropout): Dropout(p=0.1, inplace=False)\n    )\n    (encoder): BertEncoder(\n      (layer): ModuleList(\n        (0-11): 12 x BertLayer(\n          (attention): BertAttention(\n            (self): BertSdpaSelfAttention(\n              (query): Linear(in_features=768, out_features=768, bias=True)\n              (key): Linear(in_features=768, out_features=768, bias=True)\n              (value): Linear(in_features=768, out_features=768, bias=True)\n              (dropout): Dropout(p=0.1, inplace=False)\n            )\n            (output): BertSelfOutput(\n              (dense): Linear(in_features=768, out_features=768, bias=True)\n              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n              (dropout): Dropout(p=0.1, inplace=False)\n            )\n          )\n          (intermediate): BertIntermediate(\n            (dense): Linear(in_features=768, out_features=3072, bias=True)\n            (intermediate_act_fn): GELUActivation()\n          )\n          (output): BertOutput(\n            (dense): Linear(in_features=3072, out_features=768, bias=True)\n            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n            (dropout): Dropout(p=0.1, inplace=False)\n          )\n        )\n      )\n    )\n    (pooler): BertPooler(\n      (dense): Linear(in_features=768, out_features=768, bias=True)\n      (activation): Tanh()\n    )\n  )\n  (dropout): Dropout(p=0.3, inplace=False)\n  (ia_hidden): Sequential(\n    (0): Linear(in_features=768, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Dropout(p=0.3, inplace=False)\n  )\n  (ia_classifier): Linear(in_features=256, out_features=12, bias=True)\n  (ia_feature_extractor): Linear(in_features=12, out_features=256, bias=True)\n  (genome_hidden): Sequential(\n    (0): Linear(in_features=780, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Dropout(p=0.3, inplace=False)\n  )\n  (genome_classifier): Linear(in_features=256, out_features=50, bias=True)\n  (genome_feature_extractor): Linear(in_features=50, out_features=256, bias=True)\n  (cross_attention): MultiheadAttention(\n    (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)\n  )\n  (outcome_hidden): Sequential(\n    (0): Linear(in_features=1086, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Dropout(p=0.3, inplace=False)\n  )\n  (outcome_classifier): Linear(in_features=256, out_features=289, bias=True)\n)"},"metadata":{}}],"execution_count":null},{"cell_type":"code","source":["#DataLoader\n","batch_size=16\n","train_dataloader=DataLoader(\n","    train_dataset,\n","    batch_size=batch_size\n",")\n","validation_dataloader=DataLoader(\n","    val_dataset,\n","    sampler=SequentialSampler(val_dataset),\n","    batch_size=batch_size\n",")"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T22:50:28.864026Z","iopub.execute_input":"2025-03-19T22:50:28.864228Z","iopub.status.idle":"2025-03-19T22:50:28.868253Z","shell.execute_reply.started":"2025-03-19T22:50:28.864211Z","shell.execute_reply":"2025-03-19T22:50:28.867451Z"},"id":"diXi-7neB1b8"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["from torch.optim.lr_scheduler import ReduceLROnPlateau\n","parameter_groups = [\n","    #lowest learning rate\n","    {'params': model.bert.parameters(), 'lr': 2e-5},\n","\n","    {'params': model.ia_hidden.parameters(), 'lr': 3e-5},\n","    {'params': model.ia_classifier.parameters(), 'lr': 3e-5},\n","\n","    {'params': model.genome_hidden.parameters(), 'lr': 3e-5},\n","    {'params': model.genome_classifier.parameters(), 'lr': 3e-5},\n","\n","    #highest learning rate\n","    {'params': model.outcome_hidden.parameters(), 'lr': 2e-4},\n","    {'params': model.outcome_classifier.parameters(), 'lr': 2e-4},\n","\n","    {'params': model.ia_feature_extractor.parameters(), 'lr': 7e-5},\n","    {'params': model.genome_feature_extractor.parameters(), 'lr': 7e-5}\n","]\n","\n","#optimizer and scheduler\n","optimizer = AdamW(model.parameters(),\n","                  lr=3e-5,\n","                  eps=1e-8)\n","\n","#trainable parameter for uncertainty-based weighting (Kendall's multi-task loss)\n","#learn weights at each task\n","outcome_log_var = torch.nn.Parameter(torch.tensor(0.0, device=device, requires_grad=True))\n","genome_log_var = torch.nn.Parameter(torch.tensor(0.0, device=device, requires_grad=True))\n","ia_log_var = torch.nn.Parameter(torch.tensor(0.0, device=device, requires_grad=True))\n","#add log variance parameters\n","optimizer.add_param_group({'params': [outcome_log_var, genome_log_var, ia_log_var], 'lr': 2e-5})\n","\n","epochs=30\n","total_steps=len(train_dataloader)*epochs\n","\n","scheduler = ReduceLROnPlateau(\n","    optimizer,\n","    mode='max',\n","    factor=0.5,\n","    patience=2,\n","    verbose=True,\n","    threshold=0.001,\n","    min_lr=1e-6\n",")"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T22:50:28.869145Z","iopub.execute_input":"2025-03-19T22:50:28.869422Z","iopub.status.idle":"2025-03-19T22:50:28.892887Z","shell.execute_reply.started":"2025-03-19T22:50:28.869394Z","shell.execute_reply":"2025-03-19T22:50:28.892229Z"},"id":"_6DdtlW8B1b8","outputId":"87a47748-89ad-49bb-a23f-00e1899784cd"},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/transformers/optimization.py:591: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use the PyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning\n  warnings.warn(\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":["#loss function\n","#loss_fn = torch.nn.CrossEntropyLoss()\n","class FocalLoss(nn.Module):\n","#for class imbalance\n","    def __init__(self, alpha=None, gamma=2.0, reduction='mean'):\n","        super(FocalLoss, self).__init__()\n","        self.alpha = alpha\n","        self.gamma = gamma\n","        self.reduction = reduction\n","\n","    def forward(self, inputs, targets):\n","        #standard cross entropy loss\n","        ce_loss = F.cross_entropy(inputs, targets, reduction='none')\n","        #get probabilities\n","        pt = torch.exp(-ce_loss)\n","\n","        #apply focusing parameter\n","        focal_loss = (1 - pt) ** self.gamma * ce_loss\n","\n","        #apply alpha weighting if provided\n","        if self.alpha is not None:\n","            if isinstance(self.alpha, torch.Tensor):\n","                #if alpha is tensor, then specified per-class\n","                #select alpha based on target class\n","                alpha_t = self.alpha.gather(0, targets)\n","                focal_loss = alpha_t * focal_loss\n","            else:\n","                #if alpha is scalar, apply universally\n","                focal_loss= self.alpha * focal_loss\n","\n","        #reduction\n","        if self.reduction == 'mean':\n","            return focal_loss.mean()\n","        elif self.reduction == 'sum':\n","            return focal_loss.sum()\n","        else:\n","            return focal_loss\n","\n","ia_loss_fn = FocalLoss(gamma=2.0)\n","genome_loss_fn = FocalLoss(gamma=2.0)\n","outcome_loss_fn = FocalLoss(gamma=4.0)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T22:50:28.893747Z","iopub.execute_input":"2025-03-19T22:50:28.894028Z","iopub.status.idle":"2025-03-19T22:50:28.90663Z","shell.execute_reply.started":"2025-03-19T22:50:28.894Z","shell.execute_reply":"2025-03-19T22:50:28.905945Z"},"id":"rzI0b6qqB1b8"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["#early stopping parameters\n","best_f1 = 0\n","patience = 3\n","epochs_no_improve = 0\n","best_model_path = '/kaggle/working/best_hierarchical_model2.pt'\n","\n","#hard negative mining settings\n","use_hard_negatives = False\n","hard_negative_start_epoch = 3\n","hard_negative_frequency = 2\n","\n","#hierarchical loss - co-occurance stats\n","ia_outcome_counts = torch.zeros(num_impactarea_labels, num_outcome_labels)\n","genome_outcome_counts = torch.zeros(num_genome_labels, num_outcome_labels)\n","\n","for i in range(len(train_dataset)):\n","    _, _, outcome_label, genome_label, ia_label = train_dataset[i]\n","    ia_outcome_counts[ia_label][outcome_label] += 1\n","    genome_outcome_counts[genome_label][outcome_label] += 1\n","\n","#convert to probability matrices\n","ia_outcome_matrix = ia_outcome_counts / (ia_outcome_counts.sum(dim=1, keepdim=True) + 1e-10)\n","genome_outcome_matrix = genome_outcome_counts / (genome_outcome_counts.sum(dim=1, keepdim=True) + 1e-10)\n","#move to device\n","ia_outcome_matrix = ia_outcome_matrix.to(device)\n","genome_outcome_matrix = genome_outcome_matrix.to(device)\n","\n","\n","#helpers\n","def format_time(elapsed):\n","#takes time in seconds, returns string hh:mm:ss\n","    elapsed_rounded = int(round((elapsed)))\n","    return str(datetime.timedelta(seconds=elapsed_rounded))\n","\n","#calculate the accuracy of our predictions vs labels\n","def flat_accuracy(preds, labels):\n","    pred_flat = np.argmax(preds, axis=1).flatten()\n","    labels_flat = labels.flatten()\n","    return np.sum(pred_flat == labels_flat) / len(labels_flat)\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T22:50:28.907506Z","iopub.execute_input":"2025-03-19T22:50:28.907798Z","iopub.status.idle":"2025-03-19T22:50:29.299955Z","shell.execute_reply.started":"2025-03-19T22:50:28.907771Z","shell.execute_reply":"2025-03-19T22:50:29.299292Z"},"id":"Ot_dBjUkB1b8"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["Train classification model"],"metadata":{"id":"NDNvGjYdB1b9"}},{"cell_type":"code","source":["from sklearn.metrics import precision_score, recall_score, f1_score"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T22:50:29.300737Z","iopub.execute_input":"2025-03-19T22:50:29.301015Z","iopub.status.idle":"2025-03-19T22:50:29.304646Z","shell.execute_reply.started":"2025-03-19T22:50:29.300988Z","shell.execute_reply":"2025-03-19T22:50:29.303932Z"},"id":"Qxr19_zOB1b9"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["seed_val = 42\n","random.seed(seed_val)\n","np.random.seed(seed_val)\n","torch.manual_seed(seed_val)\n","torch.cuda.manual_seed_all(seed_val)\n","\n","training_stats = []\n","total_t0 = time.time()\n","\n","for epoch_i in range(0, epochs):\n","    print(f\"\\n======== Epoch {epoch_i + 1} / {epochs} ========\")\n","    #det if hard negatives needed at end of epoch\n","    calculate_hard_negatives = (epoch_i + 1) >= hard_negative_start_epoch and (epoch_i + 1) % hard_negative_frequency == 0\n","    print('Training...')\n","    t0 = time.time() #how long training epoch takes\n","    total_train_loss= 0 #reset total loss for epoch\n","    model.train() #model training mode\n","\n","    #track metrics for each task\n","    ia_correct, genome_correct, outcome_correct = 0, 0, 0\n","    total_examples = 0\n","\n","    #for each training batch\n","    for step, batch in enumerate(train_dataloader):\n","        if step % 40 == 0 and step != 0: #update progress every 40 batches\n","            elapsed = format_time(time.time() - t0) #elpased time in minutes\n","            print(f'  Batch {step:>5,} of {len(train_dataloader):>5,}. Elapsed: {elapsed}.') #report progress\n","\n","        #unpack training batch from dataloader\n","        input_ids, attention_mask, outcome_labels, genome_labels, ia_labels = [b.to(device) for b in batch]\n","        #clear previously calculated gradients before backward pass\n","        optimizer.zero_grad()\n","        #forward pass\n","        ia_logits, genome_logits, outcome_logits = model(input_ids, attention_mask)\n","\n","        #accumulate training loss over all batches\n","        ia_loss = ia_loss_fn(ia_logits, ia_labels)\n","        genome_loss = genome_loss_fn(genome_logits, genome_labels)\n","        outcome_loss = outcome_loss_fn(outcome_logits, outcome_labels)\n","\n","        #consistency loss\n","        ia_probs_detached = F.softmax(ia_logits, dim=1).detach()\n","        genome_probs_detached = F.softmax(genome_logits, dim=1).detach()\n","        #predicts outcomes based on impact area and genome\n","        hierarchical_prediction = (ia_probs_detached @ ia_outcome_matrix +\n","                              genome_probs_detached @ genome_outcome_matrix)\n","        #penalize differences between direct prediction and hierarchical prediction\n","        consistency_loss = torch.mean(torch.abs(outcome_logits - hierarchical_prediction))\n","\n","        #combine losses using uncertainty weighting\n","        total_batch_loss = 0\n","        total_batch_loss += torch.exp(-ia_log_var) * ia_loss + ia_log_var\n","        total_batch_loss += torch.exp(-genome_log_var) * genome_loss + genome_log_var\n","        #curriculum learning\n","        #gradually increase over first 5 epochs for 1-3\n","        epoch_factor = min(1.0, epoch_i / 5)\n","        outcome_weight = 1.0 + 2.0 * epoch_factor\n","        total_batch_loss += outcome_weight * (torch.exp(-outcome_log_var) * outcome_loss + outcome_log_var)\n","        total_batch_loss += 0.1 * consistency_loss #add consistency loss\n","\n","        total_batch_loss.backward() #backward pass\n","        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0) #clip gradiants\n","        optimizer.step() #update parameters & take step using computed gradient\n","        #scheduler.step() #update lr\n","\n","        total_train_loss += total_batch_loss.item() #update total loss\n","        total_examples += input_ids.size(0) #count batch samples\n","\n","        #get predictions & track accuracy\n","        _, ia_preds = torch.max(ia_logits, dim=1)\n","        _, genome_preds = torch.max(genome_logits, dim=1)\n","        _, outcome_preds = torch.max(outcome_logits, dim=1)\n","        #count correct predictions\n","        ia_correct += (ia_preds == ia_labels).sum().item()\n","        genome_correct += (genome_preds == genome_labels).sum().item()\n","        outcome_correct += (outcome_preds == outcome_labels).sum().item()\n","\n","    #calc training metrics\n","    avg_train_loss = total_train_loss / len(train_dataloader)\n","    ia_accuracy = ia_correct / total_examples\n","    genome_accuracy = genome_correct / total_examples\n","    outcome_accuracy = outcome_correct / total_examples\n","\n","    training_time = format_time(time.time() - t0)\n","    print(f\"  Average training loss: {avg_train_loss:.4f}\")\n","    print(f\"  Impact Area Accuracy: {ia_accuracy:.4f}\")\n","    print(f\"  Genome Accuracy: {genome_accuracy:.4f}\")\n","    print(f\"  Outcome Accuracy: {outcome_accuracy:.4f}\")\n","    print(f\"  Training took: {training_time}\")\n","\n","    print(f\"  Learned Log Variances: IA={ia_log_var.item():.4f}, Genome={genome_log_var.item():.4f}, Outcome={outcome_log_var.item():.4f}\")\n","\n","    # ========================================\n","    #               Validation\n","    # ========================================\n","    print(\"\\nRunning Validation...\")\n","    t0 = time.time()\n","    model.eval()\n","\n","    total_eval_loss = 0\n","    val_ia_correct, val_genome_correct, val_outcome_correct = 0, 0, 0\n","    val_total = 0\n","    #all predictions\n","    all_ia_preds = []\n","    all_ia_labels = []\n","    all_genome_preds = []\n","    all_genome_labels = []\n","    all_outcome_preds = []\n","    all_outcome_labels = []\n","\n","\n","    with torch.no_grad():\n","      for batch in validation_dataloader:\n","        input_ids, attention_mask, outcome_labels, genome_labels, ia_labels = [b.to(device) for b in batch]\n","\n","        #forward pass\n","        ia_logits, genome_logits, outcome_logits = model(input_ids, attention_mask)\n","\n","        #calc validation loss\n","        ia_loss = ia_loss_fn(ia_logits, ia_labels)\n","        genome_loss = genome_loss_fn(genome_logits, genome_labels)\n","        outcome_loss = outcome_loss_fn(outcome_logits, outcome_labels)\n","\n","        #combine losses using weighting\n","        eval_loss = 0\n","        eval_loss += torch.exp(-ia_log_var) * ia_loss + ia_log_var\n","        eval_loss += torch.exp(-genome_log_var) * genome_loss + genome_log_var\n","        eval_loss += torch.exp(-outcome_log_var) * outcome_loss + outcome_log_var\n","\n","        total_eval_loss += eval_loss.item()\n","\n","        #accuracy\n","        val_total += input_ids.size(0)\n","        #get predictions\n","        _, ia_preds = torch.max(ia_logits, dim=1)\n","        _, genome_preds = torch.max(genome_logits, dim=1)\n","        _, outcome_preds = torch.max(outcome_logits, dim=1)\n","\n","        all_ia_preds.extend(ia_preds.cpu().numpy())\n","        all_ia_labels.extend(ia_labels.cpu().numpy())\n","        all_genome_preds.extend(genome_preds.cpu().numpy())\n","        all_genome_labels.extend(genome_labels.cpu().numpy())\n","        all_outcome_preds.extend(outcome_preds.cpu().numpy())\n","        all_outcome_labels.extend(outcome_labels.cpu().numpy())\n","\n","        val_ia_correct += (ia_preds == ia_labels).sum().item()\n","        val_genome_correct += (genome_preds == genome_labels).sum().item()\n","        val_outcome_correct += (outcome_preds == outcome_labels).sum().item()\n","\n","    #validation metrics\n","    avg_val_loss = total_eval_loss / len(validation_dataloader)\n","    val_ia_accuracy = val_ia_correct / val_total\n","    val_genome_accuracy = val_genome_correct / val_total\n","    val_outcome_accuracy = val_outcome_correct / val_total\n","\n","    ia_precision = precision_score(all_ia_labels, all_ia_preds, average='macro')\n","    ia_recall = recall_score(all_ia_labels, all_ia_preds, average='macro')\n","    genome_precision = precision_score(all_genome_labels, all_genome_preds, average='macro')\n","    genome_recall = recall_score(all_genome_labels, all_genome_preds, average='macro')\n","    outcome_precision = precision_score(all_outcome_labels, all_outcome_preds, average='macro')\n","    outcome_recall = recall_score(all_outcome_labels, all_outcome_preds, average='macro')\n","\n","    validation_time = format_time(time.time() - t0)\n","\n","    print(f\"  Validation Loss: {avg_val_loss:.4f}\")\n","    print(f\"  Impact Area - Accuracy: {val_ia_accuracy:.4f}, Precision: {ia_precision:.4f}, Recall: {ia_recall:.4f}\")\n","    print(f\"  Genome - Accuracy: {val_genome_accuracy:.4f}, Precision: {genome_precision:.4f}, Recall: {genome_recall:.4f}\")\n","    print(f\"  Outcome - Accuracy: {val_outcome_accuracy:.4f}, Precision: {outcome_precision:.4f}, Recall: {outcome_recall:.4f}\")\n","    print(f\"  Validation took: {validation_time}\")\n","\n","    #calc F1 score for early stopping (after the validation loop)\n","    outcome_f1 = f1_score(all_outcome_labels, all_outcome_preds, average='macro')\n","    print(f\"Outcome Macro F1 Score: {outcome_f1:.4f}\")\n","    #step scheduler with f1 score\n","    scheduler.step(outcome_f1)\n","\n","    # ========================================\n","    #        Hard Negative Mining\n","    # ========================================\n","    if calculate_hard_negatives:\n","        print(\"\\nCalculating hard negatives for next epoch...\")\n","        t_neg = time.time()\n","\n","        #sample % training data for hard negative mining\n","        sample_percent = 0.3\n","        sample_size = int(sample_percent * len(train_dataset))\n","        sample_indices = torch.randperm(len(train_dataset))[:sample_size]\n","\n","        #create a subset dataset\n","        from torch.utils.data import Subset\n","        sampled_dataset = Subset(train_dataset, sample_indices)\n","\n","        #store loss values for all training examples\n","        all_losses = torch.ones(len(train_dataset))\n","        model.eval() #reuse model in eval mode\n","        hard_neg_batch_size = 4 #small batch size (memory)\n","\n","        with torch.no_grad():\n","            #create dataloader for the subset\n","            hard_neg_dataloader = DataLoader(\n","                sampled_dataset,\n","                batch_size=hard_neg_batch_size,\n","                shuffle=False\n","            )\n","            for i, batch in enumerate(hard_neg_dataloader):\n","                input_ids, attention_mask, outcome_labels, genome_labels, ia_labels = [b.to(device) for b in batch]\n","                #forward pass\n","                ia_logits, genome_logits, outcome_logits = model(input_ids, attention_mask)\n","\n","                #get per-example loss and move to CPU (memory)\n","                batch_losses = F.cross_entropy(outcome_logits, outcome_labels, reduction='none').cpu()\n","\n","                #map batch indices to original dataset indices\n","                batch_start = i * hard_neg_batch_size\n","                batch_end = min((i+1) * hard_neg_batch_size, sample_size)\n","                original_indices = sample_indices[batch_start:batch_end]\n","\n","                #store losses in corresponding positions\n","                all_losses[original_indices] = batch_losses\n","\n","                #clear CUDA cache periodically (memory)\n","                if i % 10 == 0:\n","                    torch.cuda.empty_cache()\n","\n","        #create example weights based on loss values\n","        temperature = 2.0  #control\" peakiness\" of distribution\n","        loss_weights = torch.softmax(all_losses / temperature, dim=0) * len(train_dataset)\n","\n","        weighted_sampler = WeightedRandomSampler(\n","            weights=loss_weights,\n","            num_samples=len(train_dataset),\n","            replacement=True\n","        )\n","\n","        #create new dataloader with weighted sampling\n","        train_dataloader = DataLoader(\n","            train_dataset,\n","            sampler=weighted_sampler,\n","            batch_size=batch_size\n","        )\n","\n","        use_hard_negatives = True\n","\n","        hard_neg_time = format_time(time.time() - t_neg)\n","        print(f\"Hard negative mining completed in {hard_neg_time}\")\n","        print(f\"Sampled {sample_percent:.1%} of data ({sample_size} examples) for hard negative mining\")\n","        print(f\"Min weight: {loss_weights.min().item():.4f}, Max weight: {loss_weights.max().item():.4f}\")\n","        print(f\"Using hard negative sampling for next epoch\")\n","\n","    #check if best model so far\n","    if outcome_f1 > best_f1:\n","        print(f\"New best model! F1 improved from {best_f1:.4f} to {outcome_f1:.4f}\")\n","        best_f1 = outcome_f1\n","\n","        #save best model\n","        torch.save({\n","            'model': model,\n","            'outcome_encoder': outcome_encoder,\n","            'genome_encoder': genome_encoder,\n","            'impactarea_encoder': impactarea_encoder,\n","            'ia_log_var': ia_log_var,\n","            'genome_log_var': genome_log_var,\n","            'outcome_log_var': outcome_log_var,\n","            'epoch': epoch_i,\n","            'f1_score': outcome_f1\n","        }, best_model_path)\n","\n","        epochs_no_improve = 0\n","    else:\n","        epochs_no_improve += 1\n","        print(f\"F1 did not improve. Best: {best_f1:.4f}, Current: {outcome_f1:.4f}\")\n","        print(f\"Epochs without improvement: {epochs_no_improve}/{patience}\")\n","\n","    #early stopping check\n","    if epochs_no_improve >= patience:\n","        print(f\"Early stopping triggered after {epoch_i + 1} epochs\")\n","        break\n","\n","    training_stats.append({\n","    'epoch': epoch_i + 1,\n","    'Training Loss': avg_train_loss,\n","    'Val. Loss': avg_val_loss,\n","    'Val. IA Accuracy': val_ia_accuracy,\n","    'Val. Genome Accuracy': val_genome_accuracy,\n","    'Val. Outcome Accuracy': val_outcome_accuracy,\n","    'Val. IA Precision': ia_precision,\n","    'Val. IA Recall': ia_recall,\n","    'Val. Genome Precision': genome_precision,\n","    'Val. Genome Recall': genome_recall,\n","    'Val. Outcome Precision': outcome_precision,\n","    'Val. Outcome Recall': outcome_recall,\n","    'Outcome F1 Score': outcome_f1,\n","    'IA Log Var': ia_log_var.item(),\n","    'Genome Log Var': genome_log_var.item(),\n","    'Outcome Log Var': outcome_log_var.item(),\n","    'Training Time': training_time,\n","    'Validation Time': validation_time,\n","    'Using Hard Negatives': use_hard_negatives\n","    })\n","\n","print(f\"\\nTraining complete!\")\n","print(f\"Total training took {format_time(time.time() - total_t0)}\")\n","print(f\"Best outcome F1 score: {best_f1:.4f}\")\n","\n","best_checkpoint = torch.load(best_model_path, weights_only=False)\n","best_model = best_checkpoint['model']\n","print(f\"Best model was from epoch {best_checkpoint['epoch'] + 1}\")\n","\n","torch.save({\n","    'model': best_model,\n","    'ia_log_var': best_checkpoint['ia_log_var'],\n","    'genome_log_var': best_checkpoint['genome_log_var'],\n","    'outcome_log_var': best_checkpoint['outcome_log_var'],\n","    'outcome_encoder': best_checkpoint['outcome_encoder'],\n","    'genome_encoder': best_checkpoint['genome_encoder'],\n","    'impactarea_encoder': best_checkpoint['impactarea_encoder'],\n","    'epoch': epoch_i,\n","    'f1_score': outcome_f1,\n","    'ia_precision': ia_precision,\n","    'ia_recall': ia_recall,\n","    'genome_precision': genome_precision,\n","    'genome_recall': genome_recall,\n","    'outcome_precision': outcome_precision,\n","    'outcome_recall': outcome_recall,\n","    'model_class' : HierarchicalBertClassifier\n","}, 'hierarchical_bert_model2.pt')"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T22:50:29.307039Z","iopub.execute_input":"2025-03-19T22:50:29.30724Z","iopub.status.idle":"2025-03-20T00:45:24.717236Z","shell.execute_reply.started":"2025-03-19T22:50:29.307223Z","shell.execute_reply":"2025-03-20T00:45:24.716272Z"},"id":"RnXV57U-B1b9","outputId":"9964309a-b0a8-4984-be77-6606237f8763"},"outputs":[{"name":"stdout","text":"\n======== Epoch 1 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:16.\n  Batch    80 of   543. Elapsed: 0:00:31.\n  Batch   120 of   543. Elapsed: 0:00:46.\n  Batch   160 of   543. Elapsed: 0:01:01.\n  Batch   200 of   543. Elapsed: 0:01:16.\n  Batch   240 of   543. Elapsed: 0:01:31.\n  Batch   280 of   543. Elapsed: 0:01:46.\n  Batch   320 of   543. Elapsed: 0:02:01.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:16.\n  Average training loss: 8.5331\n  Impact Area Accuracy: 0.6644\n  Genome Accuracy: 0.2987\n  Outcome Accuracy: 0.0659\n  Training took: 0:03:24\n  Learned Log Variances: IA=-0.0044, Genome=0.0077, Outcome=0.0101\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 6.3379\n  Impact Area - Accuracy: 0.8498, Precision: 0.8559, Recall: 0.8143\n  Genome - Accuracy: 0.4551, Precision: 0.1625, Recall: 0.2048\n  Outcome - Accuracy: 0.1092, Precision: 0.0064, Recall: 0.0191\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.0077\nNew best model! F1 improved from 0.0000 to 0.0077\n\n======== Epoch 2 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:15.\n  Batch   240 of   543. Elapsed: 0:01:30.\n  Batch   280 of   543. Elapsed: 0:01:45.\n  Batch   320 of   543. Elapsed: 0:02:00.\n  Batch   360 of   543. Elapsed: 0:02:15.\n  Batch   400 of   543. Elapsed: 0:02:30.\n  Batch   440 of   543. Elapsed: 0:02:45.\n  Batch   480 of   543. Elapsed: 0:03:00.\n  Batch   520 of   543. Elapsed: 0:03:15.\n  Average training loss: 7.3234\n  Impact Area Accuracy: 0.8724\n  Genome Accuracy: 0.5517\n  Outcome Accuracy: 0.1262\n  Training took: 0:03:23\n  Learned Log Variances: IA=-0.0166, Genome=0.0106, Outcome=0.0208\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 4.8942\n  Impact Area - Accuracy: 0.8687, Precision: 0.8764, Recall: 0.8310\n  Genome - Accuracy: 0.6370, Precision: 0.3332, Recall: 0.3995\n  Outcome - Accuracy: 0.1893, Precision: 0.0181, Recall: 0.0527\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.0231\nNew best model! F1 improved from 0.0077 to 0.0231\n\n======== Epoch 3 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:15.\n  Batch   240 of   543. Elapsed: 0:01:30.\n  Batch   280 of   543. Elapsed: 0:01:45.\n  Batch   320 of   543. Elapsed: 0:02:00.\n  Batch   360 of   543. Elapsed: 0:02:15.\n  Batch   400 of   543. Elapsed: 0:02:30.\n  Batch   440 of   543. Elapsed: 0:02:45.\n  Batch   480 of   543. Elapsed: 0:03:00.\n  Batch   520 of   543. Elapsed: 0:03:15.\n  Average training loss: 7.1603\n  Impact Area Accuracy: 0.9118\n  Genome Accuracy: 0.6776\n  Outcome Accuracy: 0.1798\n  Training took: 0:03:23\n  Learned Log Variances: IA=-0.0287, Genome=0.0092, Outcome=0.0313\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 4.0803\n  Impact Area - Accuracy: 0.8752, Precision: 0.8673, Recall: 0.8423\n  Genome - Accuracy: 0.7080, Precision: 0.4841, Recall: 0.5178\n  Outcome - Accuracy: 0.2174, Precision: 0.0409, Recall: 0.0927\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.0467\nNew best model! F1 improved from 0.0231 to 0.0467\n\n======== Epoch 4 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:15.\n  Batch   240 of   543. Elapsed: 0:01:30.\n  Batch   280 of   543. Elapsed: 0:01:45.\n  Batch   320 of   543. Elapsed: 0:02:00.\n  Batch   360 of   543. Elapsed: 0:02:15.\n  Batch   400 of   543. Elapsed: 0:02:30.\n  Batch   440 of   543. Elapsed: 0:02:45.\n  Batch   480 of   543. Elapsed: 0:03:00.\n  Batch   520 of   543. Elapsed: 0:03:15.\n  Average training loss: 7.0517\n  Impact Area Accuracy: 0.9304\n  Genome Accuracy: 0.7506\n  Outcome Accuracy: 0.2200\n  Training took: 0:03:23\n  Learned Log Variances: IA=-0.0405, Genome=0.0036, Outcome=0.0412\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 3.5543\n  Impact Area - Accuracy: 0.8747, Precision: 0.8773, Recall: 0.8513\n  Genome - Accuracy: 0.7554, Precision: 0.6600, Recall: 0.6411\n  Outcome - Accuracy: 0.2529, Precision: 0.0687, Recall: 0.1384\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.0786\n\nCalculating hard negatives for next epoch...\nHard negative mining completed in 0:00:21\nSampled 30.0% of data (2604 examples) for hard negative mining\nMin weight: 0.5259, Max weight: 53.7517\nUsing hard negative sampling for next epoch\nNew best model! F1 improved from 0.0467 to 0.0786\n\n======== Epoch 5 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:15.\n  Batch   240 of   543. Elapsed: 0:01:30.\n  Batch   280 of   543. Elapsed: 0:01:45.\n  Batch   320 of   543. Elapsed: 0:02:00.\n  Batch   360 of   543. Elapsed: 0:02:15.\n  Batch   400 of   543. Elapsed: 0:02:30.\n  Batch   440 of   543. Elapsed: 0:02:45.\n  Batch   480 of   543. Elapsed: 0:03:00.\n  Batch   520 of   543. Elapsed: 0:03:15.\n  Average training loss: 7.9292\n  Impact Area Accuracy: 0.9263\n  Genome Accuracy: 0.7856\n  Outcome Accuracy: 0.1926\n  Training took: 0:03:24\n  Learned Log Variances: IA=-0.0517, Genome=-0.0040, Outcome=0.0522\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 3.2193\n  Impact Area - Accuracy: 0.8766, Precision: 0.8604, Recall: 0.8533\n  Genome - Accuracy: 0.7913, Precision: 0.6943, Recall: 0.7026\n  Outcome - Accuracy: 0.2626, Precision: 0.0808, Recall: 0.1741\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.0917\nNew best model! F1 improved from 0.0786 to 0.0917\n\n======== Epoch 6 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:15.\n  Batch   240 of   543. Elapsed: 0:01:30.\n  Batch   280 of   543. Elapsed: 0:01:45.\n  Batch   320 of   543. Elapsed: 0:02:00.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:16.\n  Average training loss: 7.0937\n  Impact Area Accuracy: 0.9518\n  Genome Accuracy: 0.8423\n  Outcome Accuracy: 0.2536\n  Training took: 0:03:24\n  Learned Log Variances: IA=-0.0632, Genome=-0.0151, Outcome=0.0607\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 2.8892\n  Impact Area - Accuracy: 0.8733, Precision: 0.8459, Recall: 0.8634\n  Genome - Accuracy: 0.7950, Precision: 0.7138, Recall: 0.7167\n  Outcome - Accuracy: 0.3404, Precision: 0.1979, Recall: 0.2592\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.1870\n\nCalculating hard negatives for next epoch...\nHard negative mining completed in 0:00:21\nSampled 30.0% of data (2604 examples) for hard negative mining\nMin weight: 0.6248, Max weight: 33.3367\nUsing hard negative sampling for next epoch\nNew best model! F1 improved from 0.0917 to 0.1870\n\n======== Epoch 7 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:15.\n  Batch   240 of   543. Elapsed: 0:01:30.\n  Batch   280 of   543. Elapsed: 0:01:45.\n  Batch   320 of   543. Elapsed: 0:02:01.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:16.\n  Average training loss: 6.3309\n  Impact Area Accuracy: 0.9456\n  Genome Accuracy: 0.8474\n  Outcome Accuracy: 0.2904\n  Training took: 0:03:24\n  Learned Log Variances: IA=-0.0743, Genome=-0.0260, Outcome=0.0678\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 2.6962\n  Impact Area - Accuracy: 0.8715, Precision: 0.8654, Recall: 0.8456\n  Genome - Accuracy: 0.7969, Precision: 0.7303, Recall: 0.7231\n  Outcome - Accuracy: 0.3593, Precision: 0.2188, Recall: 0.2948\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.2150\nNew best model! F1 improved from 0.1870 to 0.2150\n\n======== Epoch 8 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:15.\n  Batch   240 of   543. Elapsed: 0:01:31.\n  Batch   280 of   543. Elapsed: 0:01:46.\n  Batch   320 of   543. Elapsed: 0:02:01.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:16.\n  Average training loss: 5.2655\n  Impact Area Accuracy: 0.9578\n  Genome Accuracy: 0.8767\n  Outcome Accuracy: 0.3442\n  Training took: 0:03:25\n  Learned Log Variances: IA=-0.0855, Genome=-0.0378, Outcome=0.0726\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 2.5723\n  Impact Area - Accuracy: 0.8752, Precision: 0.8583, Recall: 0.8595\n  Genome - Accuracy: 0.8102, Precision: 0.8007, Recall: 0.7659\n  Outcome - Accuracy: 0.4242, Precision: 0.2987, Recall: 0.3653\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.2845\n\nCalculating hard negatives for next epoch...\nHard negative mining completed in 0:00:20\nSampled 30.0% of data (2604 examples) for hard negative mining\nMin weight: 0.6074, Max weight: 62.4885\nUsing hard negative sampling for next epoch\nNew best model! F1 improved from 0.2150 to 0.2845\n\n======== Epoch 9 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:15.\n  Batch   240 of   543. Elapsed: 0:01:30.\n  Batch   280 of   543. Elapsed: 0:01:45.\n  Batch   320 of   543. Elapsed: 0:02:01.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:16.\n  Average training loss: 4.7659\n  Impact Area Accuracy: 0.9500\n  Genome Accuracy: 0.8810\n  Outcome Accuracy: 0.3858\n  Training took: 0:03:25\n  Learned Log Variances: IA=-0.0964, Genome=-0.0490, Outcome=0.0761\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 2.4394\n  Impact Area - Accuracy: 0.8743, Precision: 0.8727, Recall: 0.8584\n  Genome - Accuracy: 0.8047, Precision: 0.8231, Recall: 0.7883\n  Outcome - Accuracy: 0.4459, Precision: 0.3549, Recall: 0.3986\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.3372\nNew best model! F1 improved from 0.2845 to 0.3372\n\n======== Epoch 10 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:15.\n  Batch   240 of   543. Elapsed: 0:01:31.\n  Batch   280 of   543. Elapsed: 0:01:46.\n  Batch   320 of   543. Elapsed: 0:02:01.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:16.\n  Average training loss: 3.9249\n  Impact Area Accuracy: 0.9624\n  Genome Accuracy: 0.9040\n  Outcome Accuracy: 0.4622\n  Training took: 0:03:25\n  Learned Log Variances: IA=-0.1074, Genome=-0.0606, Outcome=0.0762\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 2.3154\n  Impact Area - Accuracy: 0.8770, Precision: 0.8701, Recall: 0.8623\n  Genome - Accuracy: 0.8153, Precision: 0.8344, Recall: 0.8103\n  Outcome - Accuracy: 0.4993, Precision: 0.4425, Recall: 0.4845\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.4165\n\nCalculating hard negatives for next epoch...\nHard negative mining completed in 0:00:20\nSampled 30.0% of data (2604 examples) for hard negative mining\nMin weight: 0.6055, Max weight: 49.1352\nUsing hard negative sampling for next epoch\nNew best model! F1 improved from 0.3372 to 0.4165\n\n======== Epoch 11 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:15.\n  Batch   240 of   543. Elapsed: 0:01:30.\n  Batch   280 of   543. Elapsed: 0:01:45.\n  Batch   320 of   543. Elapsed: 0:02:01.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:16.\n  Average training loss: 3.6117\n  Impact Area Accuracy: 0.9579\n  Genome Accuracy: 0.9000\n  Outcome Accuracy: 0.4940\n  Training took: 0:03:25\n  Learned Log Variances: IA=-0.1183, Genome=-0.0717, Outcome=0.0742\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 2.2770\n  Impact Area - Accuracy: 0.8812, Precision: 0.8801, Recall: 0.8608\n  Genome - Accuracy: 0.8204, Precision: 0.8366, Recall: 0.8190\n  Outcome - Accuracy: 0.5269, Precision: 0.5198, Recall: 0.5286\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.4763\nNew best model! F1 improved from 0.4165 to 0.4763\n\n======== Epoch 12 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:15.\n  Batch   240 of   543. Elapsed: 0:01:31.\n  Batch   280 of   543. Elapsed: 0:01:46.\n  Batch   320 of   543. Elapsed: 0:02:01.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:16.\n  Average training loss: 3.0472\n  Impact Area Accuracy: 0.9637\n  Genome Accuracy: 0.9128\n  Outcome Accuracy: 0.5526\n  Training took: 0:03:25\n  Learned Log Variances: IA=-0.1293, Genome=-0.0829, Outcome=0.0681\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 2.2207\n  Impact Area - Accuracy: 0.8775, Precision: 0.8610, Recall: 0.8586\n  Genome - Accuracy: 0.8236, Precision: 0.8546, Recall: 0.8182\n  Outcome - Accuracy: 0.5629, Precision: 0.5515, Recall: 0.5797\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.5286\n\nCalculating hard negatives for next epoch...\nHard negative mining completed in 0:00:20\nSampled 30.0% of data (2604 examples) for hard negative mining\nMin weight: 0.6040, Max weight: 79.8369\nUsing hard negative sampling for next epoch\nNew best model! F1 improved from 0.4763 to 0.5286\n\n======== Epoch 13 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:15.\n  Batch   240 of   543. Elapsed: 0:01:30.\n  Batch   280 of   543. Elapsed: 0:01:46.\n  Batch   320 of   543. Elapsed: 0:02:01.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:16.\n  Average training loss: 2.8701\n  Impact Area Accuracy: 0.9603\n  Genome Accuracy: 0.9166\n  Outcome Accuracy: 0.5992\n  Training took: 0:03:25\n  Learned Log Variances: IA=-0.1401, Genome=-0.0938, Outcome=0.0602\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 2.2454\n  Impact Area - Accuracy: 0.8724, Precision: 0.8522, Recall: 0.8603\n  Genome - Accuracy: 0.8194, Precision: 0.8313, Recall: 0.8304\n  Outcome - Accuracy: 0.5891, Precision: 0.6057, Recall: 0.6125\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.5736\nNew best model! F1 improved from 0.5286 to 0.5736\n\n======== Epoch 14 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:15.\n  Batch   240 of   543. Elapsed: 0:01:30.\n  Batch   280 of   543. Elapsed: 0:01:46.\n  Batch   320 of   543. Elapsed: 0:02:01.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:16.\n  Average training loss: 2.3294\n  Impact Area Accuracy: 0.9606\n  Genome Accuracy: 0.9272\n  Outcome Accuracy: 0.6582\n  Training took: 0:03:25\n  Learned Log Variances: IA=-0.1510, Genome=-0.1048, Outcome=0.0492\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 2.0786\n  Impact Area - Accuracy: 0.8867, Precision: 0.8755, Recall: 0.8656\n  Genome - Accuracy: 0.8328, Precision: 0.8531, Recall: 0.8299\n  Outcome - Accuracy: 0.6066, Precision: 0.6486, Recall: 0.6346\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.6126\n\nCalculating hard negatives for next epoch...\nHard negative mining completed in 0:00:21\nSampled 30.0% of data (2604 examples) for hard negative mining\nMin weight: 0.6353, Max weight: 55.3358\nUsing hard negative sampling for next epoch\nNew best model! F1 improved from 0.5736 to 0.6126\n\n======== Epoch 15 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:15.\n  Batch   240 of   543. Elapsed: 0:01:31.\n  Batch   280 of   543. Elapsed: 0:01:46.\n  Batch   320 of   543. Elapsed: 0:02:01.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:16.\n  Average training loss: 2.3288\n  Impact Area Accuracy: 0.9548\n  Genome Accuracy: 0.9190\n  Outcome Accuracy: 0.6675\n  Training took: 0:03:25\n  Learned Log Variances: IA=-0.1617, Genome=-0.1154, Outcome=0.0389\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 2.0422\n  Impact Area - Accuracy: 0.8784, Precision: 0.8712, Recall: 0.8593\n  Genome - Accuracy: 0.8287, Precision: 0.8590, Recall: 0.8298\n  Outcome - Accuracy: 0.6126, Precision: 0.6554, Recall: 0.6505\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.6273\nNew best model! F1 improved from 0.6126 to 0.6273\n\n======== Epoch 16 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:15.\n  Batch   240 of   543. Elapsed: 0:01:31.\n  Batch   280 of   543. Elapsed: 0:01:46.\n  Batch   320 of   543. Elapsed: 0:02:01.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:16.\n  Average training loss: 1.7848\n  Impact Area Accuracy: 0.9615\n  Genome Accuracy: 0.9354\n  Outcome Accuracy: 0.7220\n  Training took: 0:03:25\n  Learned Log Variances: IA=-0.1726, Genome=-0.1265, Outcome=0.0267\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 2.1201\n  Impact Area - Accuracy: 0.8798, Precision: 0.8704, Recall: 0.8623\n  Genome - Accuracy: 0.8250, Precision: 0.8467, Recall: 0.8208\n  Outcome - Accuracy: 0.6297, Precision: 0.6789, Recall: 0.6775\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.6550\n\nCalculating hard negatives for next epoch...\nHard negative mining completed in 0:00:21\nSampled 30.0% of data (2604 examples) for hard negative mining\nMin weight: 0.6470, Max weight: 34.0705\nUsing hard negative sampling for next epoch\nNew best model! F1 improved from 0.6273 to 0.6550\n\n======== Epoch 17 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:15.\n  Batch   240 of   543. Elapsed: 0:01:31.\n  Batch   280 of   543. Elapsed: 0:01:46.\n  Batch   320 of   543. Elapsed: 0:02:01.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:16.\n  Average training loss: 1.7421\n  Impact Area Accuracy: 0.9565\n  Genome Accuracy: 0.9312\n  Outcome Accuracy: 0.7374\n  Training took: 0:03:25\n  Learned Log Variances: IA=-0.1834, Genome=-0.1372, Outcome=0.0154\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 2.0468\n  Impact Area - Accuracy: 0.8816, Precision: 0.8821, Recall: 0.8600\n  Genome - Accuracy: 0.8319, Precision: 0.8616, Recall: 0.8323\n  Outcome - Accuracy: 0.6430, Precision: 0.6998, Recall: 0.6884\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.6684\nNew best model! F1 improved from 0.6550 to 0.6684\n\n======== Epoch 18 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:15.\n  Batch   240 of   543. Elapsed: 0:01:31.\n  Batch   280 of   543. Elapsed: 0:01:46.\n  Batch   320 of   543. Elapsed: 0:02:01.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:16.\n  Average training loss: 1.4402\n  Impact Area Accuracy: 0.9614\n  Genome Accuracy: 0.9346\n  Outcome Accuracy: 0.7722\n  Training took: 0:03:25\n  Learned Log Variances: IA=-0.1942, Genome=-0.1481, Outcome=0.0036\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 2.0545\n  Impact Area - Accuracy: 0.8848, Precision: 0.8822, Recall: 0.8665\n  Genome - Accuracy: 0.8263, Precision: 0.8522, Recall: 0.8262\n  Outcome - Accuracy: 0.6403, Precision: 0.7138, Recall: 0.6936\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.6809\n\nCalculating hard negatives for next epoch...\nHard negative mining completed in 0:00:21\nSampled 30.0% of data (2604 examples) for hard negative mining\nMin weight: 0.6641, Max weight: 24.9568\nUsing hard negative sampling for next epoch\nNew best model! F1 improved from 0.6684 to 0.6809\n\n======== Epoch 19 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:15.\n  Batch   240 of   543. Elapsed: 0:01:31.\n  Batch   280 of   543. Elapsed: 0:01:46.\n  Batch   320 of   543. Elapsed: 0:02:01.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:16.\n  Average training loss: 1.3735\n  Impact Area Accuracy: 0.9588\n  Genome Accuracy: 0.9359\n  Outcome Accuracy: 0.7833\n  Training took: 0:03:25\n  Learned Log Variances: IA=-0.2050, Genome=-0.1589, Outcome=-0.0074\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 2.1030\n  Impact Area - Accuracy: 0.8807, Precision: 0.8697, Recall: 0.8642\n  Genome - Accuracy: 0.8296, Precision: 0.8473, Recall: 0.8331\n  Outcome - Accuracy: 0.6587, Precision: 0.7198, Recall: 0.7153\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.6964\nNew best model! F1 improved from 0.6809 to 0.6964\n\n======== Epoch 20 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:16.\n  Batch   240 of   543. Elapsed: 0:01:31.\n  Batch   280 of   543. Elapsed: 0:01:46.\n  Batch   320 of   543. Elapsed: 0:02:01.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:16.\n  Average training loss: 1.0548\n  Impact Area Accuracy: 0.9700\n  Genome Accuracy: 0.9457\n  Outcome Accuracy: 0.8145\n  Training took: 0:03:25\n  Learned Log Variances: IA=-0.2160, Genome=-0.1699, Outcome=-0.0190\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 2.1264\n  Impact Area - Accuracy: 0.8812, Precision: 0.8724, Recall: 0.8677\n  Genome - Accuracy: 0.8319, Precision: 0.8446, Recall: 0.8310\n  Outcome - Accuracy: 0.6495, Precision: 0.7045, Recall: 0.7034\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.6823\n\nCalculating hard negatives for next epoch...\nHard negative mining completed in 0:00:21\nSampled 30.0% of data (2604 examples) for hard negative mining\nMin weight: 0.6578, Max weight: 66.1031\nUsing hard negative sampling for next epoch\nF1 did not improve. Best: 0.6964, Current: 0.6823\nEpochs without improvement: 1/3\n\n======== Epoch 21 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:16.\n  Batch   240 of   543. Elapsed: 0:01:31.\n  Batch   280 of   543. Elapsed: 0:01:46.\n  Batch   320 of   543. Elapsed: 0:02:01.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:16.\n  Average training loss: 1.1145\n  Impact Area Accuracy: 0.9611\n  Genome Accuracy: 0.9368\n  Outcome Accuracy: 0.8134\n  Training took: 0:03:25\n  Learned Log Variances: IA=-0.2267, Genome=-0.1805, Outcome=-0.0298\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 2.0859\n  Impact Area - Accuracy: 0.8835, Precision: 0.8681, Recall: 0.8672\n  Genome - Accuracy: 0.8342, Precision: 0.8554, Recall: 0.8373\n  Outcome - Accuracy: 0.6633, Precision: 0.7274, Recall: 0.7174\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.6999\nNew best model! F1 improved from 0.6964 to 0.6999\n\n======== Epoch 22 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:15.\n  Batch   240 of   543. Elapsed: 0:01:31.\n  Batch   280 of   543. Elapsed: 0:01:46.\n  Batch   320 of   543. Elapsed: 0:02:01.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:16.\n  Average training loss: 0.8536\n  Impact Area Accuracy: 0.9685\n  Genome Accuracy: 0.9449\n  Outcome Accuracy: 0.8331\n  Training took: 0:03:25\n  Learned Log Variances: IA=-0.2376, Genome=-0.1914, Outcome=-0.0410\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 2.1234\n  Impact Area - Accuracy: 0.8862, Precision: 0.8739, Recall: 0.8719\n  Genome - Accuracy: 0.8300, Precision: 0.8467, Recall: 0.8371\n  Outcome - Accuracy: 0.6426, Precision: 0.7216, Recall: 0.7097\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.6945\n\nCalculating hard negatives for next epoch...\nHard negative mining completed in 0:00:21\nSampled 30.0% of data (2604 examples) for hard negative mining\nMin weight: 0.6636, Max weight: 24.4109\nUsing hard negative sampling for next epoch\nF1 did not improve. Best: 0.6999, Current: 0.6945\nEpochs without improvement: 1/3\n\n======== Epoch 23 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:16.\n  Batch   240 of   543. Elapsed: 0:01:31.\n  Batch   280 of   543. Elapsed: 0:01:46.\n  Batch   320 of   543. Elapsed: 0:02:01.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:16.\n  Average training loss: 0.8065\n  Impact Area Accuracy: 0.9647\n  Genome Accuracy: 0.9445\n  Outcome Accuracy: 0.8331\n  Training took: 0:03:25\n  Learned Log Variances: IA=-0.2484, Genome=-0.2021, Outcome=-0.0518\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 2.0611\n  Impact Area - Accuracy: 0.8816, Precision: 0.8679, Recall: 0.8649\n  Genome - Accuracy: 0.8342, Precision: 0.8510, Recall: 0.8360\n  Outcome - Accuracy: 0.6637, Precision: 0.7328, Recall: 0.7108\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.7020\nNew best model! F1 improved from 0.6999 to 0.7020\n\n======== Epoch 24 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:15.\n  Batch   240 of   543. Elapsed: 0:01:31.\n  Batch   280 of   543. Elapsed: 0:01:46.\n  Batch   320 of   543. Elapsed: 0:02:01.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:16.\n  Average training loss: 0.6898\n  Impact Area Accuracy: 0.9624\n  Genome Accuracy: 0.9430\n  Outcome Accuracy: 0.8482\n  Training took: 0:03:25\n  Learned Log Variances: IA=-0.2592, Genome=-0.2129, Outcome=-0.0627\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 2.0884\n  Impact Area - Accuracy: 0.8798, Precision: 0.8657, Recall: 0.8659\n  Genome - Accuracy: 0.8291, Precision: 0.8502, Recall: 0.8367\n  Outcome - Accuracy: 0.6637, Precision: 0.7290, Recall: 0.7201\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.7060\n\nCalculating hard negatives for next epoch...\nHard negative mining completed in 0:00:20\nSampled 30.0% of data (2604 examples) for hard negative mining\nMin weight: 0.6658, Max weight: 67.2874\nUsing hard negative sampling for next epoch\nNew best model! F1 improved from 0.7020 to 0.7060\n\n======== Epoch 25 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:15.\n  Batch   240 of   543. Elapsed: 0:01:31.\n  Batch   280 of   543. Elapsed: 0:01:46.\n  Batch   320 of   543. Elapsed: 0:02:01.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:16.\n  Average training loss: 0.6045\n  Impact Area Accuracy: 0.9671\n  Genome Accuracy: 0.9417\n  Outcome Accuracy: 0.8480\n  Training took: 0:03:25\n  Learned Log Variances: IA=-0.2700, Genome=-0.2236, Outcome=-0.0735\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 2.1390\n  Impact Area - Accuracy: 0.8830, Precision: 0.8679, Recall: 0.8702\n  Genome - Accuracy: 0.8356, Precision: 0.8513, Recall: 0.8363\n  Outcome - Accuracy: 0.6684, Precision: 0.7406, Recall: 0.7204\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.7113\nNew best model! F1 improved from 0.7060 to 0.7113\n\n======== Epoch 26 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:16.\n  Batch   240 of   543. Elapsed: 0:01:31.\n  Batch   280 of   543. Elapsed: 0:01:46.\n  Batch   320 of   543. Elapsed: 0:02:01.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:16.\n  Average training loss: 0.3992\n  Impact Area Accuracy: 0.9700\n  Genome Accuracy: 0.9487\n  Outcome Accuracy: 0.8669\n  Training took: 0:03:25\n  Learned Log Variances: IA=-0.2809, Genome=-0.2345, Outcome=-0.0846\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 2.1158\n  Impact Area - Accuracy: 0.8858, Precision: 0.8711, Recall: 0.8728\n  Genome - Accuracy: 0.8379, Precision: 0.8542, Recall: 0.8392\n  Outcome - Accuracy: 0.6628, Precision: 0.7348, Recall: 0.7224\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.7098\n\nCalculating hard negatives for next epoch...\nHard negative mining completed in 0:00:20\nSampled 30.0% of data (2604 examples) for hard negative mining\nMin weight: 0.6717, Max weight: 14.9035\nUsing hard negative sampling for next epoch\nF1 did not improve. Best: 0.7113, Current: 0.7098\nEpochs without improvement: 1/3\n\n======== Epoch 27 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:15.\n  Batch   240 of   543. Elapsed: 0:01:31.\n  Batch   280 of   543. Elapsed: 0:01:46.\n  Batch   320 of   543. Elapsed: 0:02:01.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:16.\n  Average training loss: 0.4416\n  Impact Area Accuracy: 0.9657\n  Genome Accuracy: 0.9438\n  Outcome Accuracy: 0.8556\n  Training took: 0:03:25\n  Learned Log Variances: IA=-0.2917, Genome=-0.2452, Outcome=-0.0952\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 2.0540\n  Impact Area - Accuracy: 0.8876, Precision: 0.8717, Recall: 0.8686\n  Genome - Accuracy: 0.8374, Precision: 0.8578, Recall: 0.8341\n  Outcome - Accuracy: 0.6803, Precision: 0.7551, Recall: 0.7282\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.7244\nNew best model! F1 improved from 0.7113 to 0.7244\n\n======== Epoch 28 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:16.\n  Batch   240 of   543. Elapsed: 0:01:31.\n  Batch   280 of   543. Elapsed: 0:01:46.\n  Batch   320 of   543. Elapsed: 0:02:01.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:16.\n  Average training loss: 0.2682\n  Impact Area Accuracy: 0.9683\n  Genome Accuracy: 0.9477\n  Outcome Accuracy: 0.8682\n  Training took: 0:03:25\n  Learned Log Variances: IA=-0.3026, Genome=-0.2561, Outcome=-0.1061\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 2.0700\n  Impact Area - Accuracy: 0.8839, Precision: 0.8790, Recall: 0.8639\n  Genome - Accuracy: 0.8411, Precision: 0.8720, Recall: 0.8363\n  Outcome - Accuracy: 0.6582, Precision: 0.7452, Recall: 0.7222\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.7168\n\nCalculating hard negatives for next epoch...\nHard negative mining completed in 0:00:20\nSampled 30.0% of data (2604 examples) for hard negative mining\nMin weight: 0.6753, Max weight: 15.1833\nUsing hard negative sampling for next epoch\nF1 did not improve. Best: 0.7244, Current: 0.7168\nEpochs without improvement: 1/3\n\n======== Epoch 29 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:16.\n  Batch   240 of   543. Elapsed: 0:01:31.\n  Batch   280 of   543. Elapsed: 0:01:46.\n  Batch   320 of   543. Elapsed: 0:02:01.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:16.\n  Average training loss: 0.2548\n  Impact Area Accuracy: 0.9629\n  Genome Accuracy: 0.9439\n  Outcome Accuracy: 0.8607\n  Training took: 0:03:25\n  Learned Log Variances: IA=-0.3134, Genome=-0.2667, Outcome=-0.1167\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 2.0466\n  Impact Area - Accuracy: 0.8835, Precision: 0.8784, Recall: 0.8630\n  Genome - Accuracy: 0.8369, Precision: 0.8578, Recall: 0.8390\n  Outcome - Accuracy: 0.6587, Precision: 0.7435, Recall: 0.7207\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.7147\nF1 did not improve. Best: 0.7244, Current: 0.7147\nEpochs without improvement: 2/3\n\n======== Epoch 30 / 30 ========\nTraining...\n  Batch    40 of   543. Elapsed: 0:00:15.\n  Batch    80 of   543. Elapsed: 0:00:30.\n  Batch   120 of   543. Elapsed: 0:00:45.\n  Batch   160 of   543. Elapsed: 0:01:00.\n  Batch   200 of   543. Elapsed: 0:01:16.\n  Batch   240 of   543. Elapsed: 0:01:31.\n  Batch   280 of   543. Elapsed: 0:01:46.\n  Batch   320 of   543. Elapsed: 0:02:01.\n  Batch   360 of   543. Elapsed: 0:02:16.\n  Batch   400 of   543. Elapsed: 0:02:31.\n  Batch   440 of   543. Elapsed: 0:02:46.\n  Batch   480 of   543. Elapsed: 0:03:01.\n  Batch   520 of   543. Elapsed: 0:03:17.\n  Average training loss: 0.0597\n  Impact Area Accuracy: 0.9707\n  Genome Accuracy: 0.9505\n  Outcome Accuracy: 0.8725\n  Training took: 0:03:25\n  Learned Log Variances: IA=-0.3242, Genome=-0.2776, Outcome=-0.1277\n\nRunning Validation...\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"name":"stdout","text":"  Validation Loss: 2.0674\n  Impact Area - Accuracy: 0.8830, Precision: 0.8696, Recall: 0.8667\n  Genome - Accuracy: 0.8365, Precision: 0.8624, Recall: 0.8334\n  Outcome - Accuracy: 0.6743, Precision: 0.7562, Recall: 0.7234\n  Validation took: 0:00:15\nOutcome Macro F1 Score: 0.7213\n\nCalculating hard negatives for next epoch...\nHard negative mining completed in 0:00:21\nSampled 30.0% of data (2604 examples) for hard negative mining\nMin weight: 0.6692, Max weight: 17.1937\nUsing hard negative sampling for next epoch\nF1 did not improve. Best: 0.7244, Current: 0.7213\nEpochs without improvement: 3/3\nEarly stopping triggered after 30 epochs\n\nTraining complete!\nTotal training took 1:54:54\nBest outcome F1 score: 0.7244\nBest model was from epoch 27\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":["epochs= [stats['epoch'] for stats in training_stats]\n","train_loss= [stats['Training Loss'] for stats in training_stats]\n","val_loss= [stats['Val. Loss'] for stats in training_stats]\n","f1_scores= [stats['Outcome F1 Score'] for stats in training_stats]\n","\n","plt.figure(figsize=(12, 8))\n","\n","plt.subplot(2, 1, 1)\n","plt.plot(epochs, train_loss, 'b-o', label='Training Loss')\n","plt.plot(epochs, val_loss, 'r-o', label='Validation Loss')\n","plt.title('Training and Validation Loss')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.legend()\n","plt.grid(True, alpha=0.3)\n","\n","plt.subplot(2, 1, 2)\n","plt.plot(epochs, f1_scores, 'g-o')\n","plt.title('Outcome F1 Score')\n","plt.xlabel('Epoch')\n","plt.ylabel('F1 Score')\n","plt.grid(True, alpha=0.3)\n","\n","plt.tight_layout()\n","plt.savefig('learning_curve.png')\n","plt.show()"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-20T00:45:24.718752Z","iopub.execute_input":"2025-03-20T00:45:24.719058Z","iopub.status.idle":"2025-03-20T00:45:25.467574Z","shell.execute_reply.started":"2025-03-20T00:45:24.719029Z","shell.execute_reply":"2025-03-20T00:45:25.466798Z"},"id":"syg39UIUB1b9","outputId":"87eb7991-46be-401e-ee44-dc2c5559a246"},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x800 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":null},{"cell_type":"code","source":["from tqdm import tqdm\n","import re"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-20T00:45:25.475849Z","iopub.execute_input":"2025-03-20T00:45:25.476049Z","iopub.status.idle":"2025-03-20T00:45:25.492241Z","shell.execute_reply.started":"2025-03-20T00:45:25.476031Z","shell.execute_reply":"2025-03-20T00:45:25.491467Z"},"id":"aW92jjV-B1b-"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["def predict_outcomes(input_file, model_file, output_file=None):\n","    #maps outcomeids to outcome\n","    #outputs predictions\n","\n","    if output_file is None:\n","        output_file='predictions.xlsx'\n","\n","    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","    print(f\"Using device: {device}\")\n","\n","    #load data\n","    df=pd.read_excel(input_file)\n","\n","    #map outcomes from input file\n","    outcome_dict= {}\n","    if 'outcomeid' in df.columns and 'outcome' in df.columns:\n","        outcome_mapping= df[['outcomeid', 'outcome']].drop_duplicates()\n","        outcome_dict= dict(zip(outcome_mapping['outcomeid'], outcome_mapping['outcome']))\n","\n","    #load model\n","    #prevent errors\n","    from torch.serialization import add_safe_globals\n","    add_safe_globals([HierarchicalBertClassifier])\n","    try:\n","        checkpoint= torch.load(model_file, map_location=device, weights_only=False)\n","    except:\n","        try:\n","            checkpoint= torch.load(model_file, map_location=device)\n","        except:\n","            checkpoint= torch.load(\n","                model_file,\n","                map_location=device,\n","                pickle_module =torch.serialization.pickle_module,\n","                weights_only=False\n","            )\n","\n","    model= checkpoint['model']\n","    model.to(device)\n","    model.eval()\n","\n","    #get encoders\n","    outcome_encoder= checkpoint.get('outcome_encoder')\n","    genome_encoder= checkpoint.get('genome_encoder')\n","    impactarea_encoder= checkpoint.get('impactarea_encoder')\n","\n","    print(\"Initializing tokenizer\")\n","    tokenizer= BertTokenizer.from_pretrained(\"bert-base-uncased\")\n","    print(\"Processing program descriptions\")\n","    descriptions = df['programdescription'].fillna(\"\").astype(str).tolist()\n","\n","    encodings= tokenizer.batch_encode_plus(\n","        descriptions,\n","        add_special_tokens=True,\n","        max_length=240,\n","        padding='max_length',\n","        truncation=True,\n","        return_attention_mask=True,\n","        return_tensors='pt'\n","    )\n","\n","    input_ids= encodings['input_ids'].to(device)\n","    attention_mask= encodings['attention_mask'].to(device)\n","\n","    #make predictions in batches\n","    batch_size= 16\n","    total_batches= (len(input_ids) + batch_size - 1) // batch_size\n","\n","    all_ia_preds= []\n","    all_genome_preds= []\n","    all_outcome_preds= []\n","\n","    with torch.no_grad():\n","        for i in tqdm(range(0, len(input_ids), batch_size), total=total_batches):\n","            batch_input_ids = input_ids[i:i+batch_size]\n","            batch_attention_mask = attention_mask[i:i+batch_size]\n","\n","            #get predictions\n","            ia_preds, genome_preds, outcome_preds = model.predict(\n","                batch_input_ids,\n","                batch_attention_mask\n","            )\n","\n","            all_ia_preds.extend(ia_preds.cpu().numpy())\n","            all_genome_preds.extend(genome_preds.cpu().numpy())\n","            all_outcome_preds.extend(outcome_preds.cpu().numpy())\n","\n","    #convert predictions to labels\n","    print(\"Converting predictions to labels...\")\n","    if outcome_encoder is not None:\n","        df['predicted_outcomeid'] = outcome_encoder.inverse_transform(all_outcome_preds)\n","        df['predicted_genome'] = genome_encoder.inverse_transform(all_genome_preds)\n","        df['predicted_impact_area'] = impactarea_encoder.inverse_transform(all_ia_preds)\n","\n","        #map to outcomeid to outcome\n","        if outcome_dict:\n","            df['predicted_outcome']= df['predicted_outcomeid'].map(outcome_dict)\n","    else:\n","        df['predicted_outcomeid']= all_outcome_preds\n","        df['predicted_genome_id']= all_genome_preds\n","        df['predicted_impact_area_id']= all_ia_preds\n","\n","    #save results\n","    print(f\"Saving predictions to {output_file}\")\n","    df.to_excel(output_file, index=False)\n","    print(\"Done!\")\n","\n","    return df"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-20T00:46:11.044224Z","iopub.execute_input":"2025-03-20T00:46:11.0445Z","iopub.status.idle":"2025-03-20T00:46:11.055923Z","shell.execute_reply.started":"2025-03-20T00:46:11.044478Z","shell.execute_reply":"2025-03-20T00:46:11.05501Z"},"id":"pbLUbW91B1b-"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["import os\n","os.listdir('/kaggle/input')\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-20T00:47:47.813548Z","iopub.execute_input":"2025-03-20T00:47:47.813873Z","iopub.status.idle":"2025-03-20T00:47:47.82003Z","shell.execute_reply.started":"2025-03-20T00:47:47.813845Z","shell.execute_reply":"2025-03-20T00:47:47.819153Z"},"id":"ecmk8HWJB1b-","outputId":"fb4ca763-2857-49ee-e0eb-519d1d58f1d4"},"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"['Combined Data.xlsx']"},"metadata":{}}],"execution_count":null},{"cell_type":"code","source":["\"\"\"\n","predict_outcomes(\n","    input_file='/content/drive/MyDrive/DSC 672/Data - Synthetic/Combined Data.xlsx',\n","    model_file=\"/content/drive/MyDrive/DSC 672/Code Files: Classification Model/Models/best_hierarchical_model2.pt\",\n","    output_file=\"/content/drive/MyDrive/DSC 672/Data - Synthetic/predictions.xlsx\"\n",")\n","\"\"\""],"metadata":{"id":"rKM2S07kCoB-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["predict_outcomes(\n","    input_file='/kaggle/input/Combined Data.xlsx',\n","    model_file=\"/kaggle/working/best_hierarchical_model2.pt\",\n","    output_file=\"/kaggle/working/predictions.xlsx\"\n",")"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-20T00:48:00.047476Z","iopub.execute_input":"2025-03-20T00:48:00.047779Z","iopub.status.idle":"2025-03-20T00:49:40.146409Z","shell.execute_reply.started":"2025-03-20T00:48:00.047756Z","shell.execute_reply":"2025-03-20T00:49:40.145736Z"},"id":"xyF0KWDgB1b-","outputId":"8249be8e-6bc1-4efa-dc53-d2930db4d649"},"outputs":[{"name":"stdout","text":"Using device: cuda\nInitializing tokenizer\nProcessing program descriptions\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 692/692 [01:14<00:00,  9.28it/s]\n","output_type":"stream"},{"name":"stdout","text":"Converting predictions to labels...\nSaving predictions to /kaggle/working/predictions.xlsx\nDone!\n","output_type":"stream"},{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"       programreportid                                 programdescription  \\\n0                   76  The Bookmobile is the Maryland Book Bank's mob...   \n1                  104             This program provides students with...   \n2                  111  Prepped! enables underserved, low income, and ...   \n3                  113  Illinois Action for Children designed and impl...   \n4                  117  Junior Achievement of Tampa Bays Hall of Fame ...   \n...                ...                                                ...   \n11053            14104  The Blue Whale Initiative is dedicated to enha...   \n11054            14105  The Blue Sky Initiative is dedicated to enhanc...   \n11055            14106  The Green Leaf Initiative, led by the Emerald ...   \n11056            14107  The Mindful Pathway Initiative, spearheaded by...   \n11057            14108  The Mindful Meadows initiative is a comprehens...   \n\n                 impactarea                        genome  \\\n0                 Education      K-12 Student Achievement   \n1      Critical Human Needs                  Homelessness   \n2                 Education  College and Career Readiness   \n3                 Education     Early Childhood Education   \n4                 Education      K-12 Student Achievement   \n...                     ...                           ...   \n11053         Public Health  Mental and Behavioral Health   \n11054         Public Health  Mental and Behavioral Health   \n11055         Public Health  Mental and Behavioral Health   \n11056         Public Health  Mental and Behavioral Health   \n11057         Public Health  Mental and Behavioral Health   \n\n                                                 outcome  outcomeid  \\\n0            Expand Reach and Scale Effective Strategies      377.0   \n1                            Access to Temporary Housing       13.0   \n2                            Career Access and Readiness       28.0   \n3      Network Building and Capacity Development (Org...      510.0   \n4      Improved Academic Attitudes, Beliefs, and Moti...       95.0   \n...                                                  ...        ...   \n11053  Utilization of Mental and Behavioral Health Se...      901.0   \n11054  Utilization of Mental and Behavioral Health Se...      901.0   \n11055  Utilization of Mental and Behavioral Health Se...      901.0   \n11056  Utilization of Mental and Behavioral Health Se...      901.0   \n11057  Utilization of Mental and Behavioral Health Se...      901.0   \n\n       predicted_outcomeid              predicted_genome  \\\n0                        2      K-12 Student Achievement   \n1                       13                  Homelessness   \n2                      150           Criminal Recidivism   \n3                      144     Early Childhood Education   \n4                       95      K-12 Student Achievement   \n...                    ...                           ...   \n11053                  901  Mental and Behavioral Health   \n11054                  901  Mental and Behavioral Health   \n11055                  901  Mental and Behavioral Health   \n11056                  901  Mental and Behavioral Health   \n11057                  901  Mental and Behavioral Health   \n\n      predicted_impact_area                                  predicted_outcome  \n0                 Education                           Improved Academic Skills  \n1      Critical Human Needs                        Access to Temporary Housing  \n2          Criminal Justice                                  Prisoner Re-Entry  \n3                 Education                        Positive School Environment  \n4                 Education  Improved Academic Attitudes, Beliefs, and Moti...  \n...                     ...                                                ...  \n11053         Public Health  Utilization of Mental and Behavioral Health Se...  \n11054         Public Health  Utilization of Mental and Behavioral Health Se...  \n11055         Public Health  Utilization of Mental and Behavioral Health Se...  \n11056         Public Health  Utilization of Mental and Behavioral Health Se...  \n11057         Public Health  Utilization of Mental and Behavioral Health Se...  \n\n[11058 rows x 10 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>programreportid</th>\n      <th>programdescription</th>\n      <th>impactarea</th>\n      <th>genome</th>\n      <th>outcome</th>\n      <th>outcomeid</th>\n      <th>predicted_outcomeid</th>\n      <th>predicted_genome</th>\n      <th>predicted_impact_area</th>\n      <th>predicted_outcome</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>76</td>\n      <td>The Bookmobile is the Maryland Book Bank's mob...</td>\n      <td>Education</td>\n      <td>K-12 Student Achievement</td>\n      <td>Expand Reach and Scale Effective Strategies</td>\n      <td>377.0</td>\n      <td>2</td>\n      <td>K-12 Student Achievement</td>\n      <td>Education</td>\n      <td>Improved Academic Skills</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>104</td>\n      <td>This program provides students with...</td>\n      <td>Critical Human Needs</td>\n      <td>Homelessness</td>\n      <td>Access to Temporary Housing</td>\n      <td>13.0</td>\n      <td>13</td>\n      <td>Homelessness</td>\n      <td>Critical Human Needs</td>\n      <td>Access to Temporary Housing</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>111</td>\n      <td>Prepped! enables underserved, low income, and ...</td>\n      <td>Education</td>\n      <td>College and Career Readiness</td>\n      <td>Career Access and Readiness</td>\n      <td>28.0</td>\n      <td>150</td>\n      <td>Criminal Recidivism</td>\n      <td>Criminal Justice</td>\n      <td>Prisoner Re-Entry</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>113</td>\n      <td>Illinois Action for Children designed and impl...</td>\n      <td>Education</td>\n      <td>Early Childhood Education</td>\n      <td>Network Building and Capacity Development (Org...</td>\n      <td>510.0</td>\n      <td>144</td>\n      <td>Early Childhood Education</td>\n      <td>Education</td>\n      <td>Positive School Environment</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>117</td>\n      <td>Junior Achievement of Tampa Bays Hall of Fame ...</td>\n      <td>Education</td>\n      <td>K-12 Student Achievement</td>\n      <td>Improved Academic Attitudes, Beliefs, and Moti...</td>\n      <td>95.0</td>\n      <td>95</td>\n      <td>K-12 Student Achievement</td>\n      <td>Education</td>\n      <td>Improved Academic Attitudes, Beliefs, and Moti...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>11053</th>\n      <td>14104</td>\n      <td>The Blue Whale Initiative is dedicated to enha...</td>\n      <td>Public Health</td>\n      <td>Mental and Behavioral Health</td>\n      <td>Utilization of Mental and Behavioral Health Se...</td>\n      <td>901.0</td>\n      <td>901</td>\n      <td>Mental and Behavioral Health</td>\n      <td>Public Health</td>\n      <td>Utilization of Mental and Behavioral Health Se...</td>\n    </tr>\n    <tr>\n      <th>11054</th>\n      <td>14105</td>\n      <td>The Blue Sky Initiative is dedicated to enhanc...</td>\n      <td>Public Health</td>\n      <td>Mental and Behavioral Health</td>\n      <td>Utilization of Mental and Behavioral Health Se...</td>\n      <td>901.0</td>\n      <td>901</td>\n      <td>Mental and Behavioral Health</td>\n      <td>Public Health</td>\n      <td>Utilization of Mental and Behavioral Health Se...</td>\n    </tr>\n    <tr>\n      <th>11055</th>\n      <td>14106</td>\n      <td>The Green Leaf Initiative, led by the Emerald ...</td>\n      <td>Public Health</td>\n      <td>Mental and Behavioral Health</td>\n      <td>Utilization of Mental and Behavioral Health Se...</td>\n      <td>901.0</td>\n      <td>901</td>\n      <td>Mental and Behavioral Health</td>\n      <td>Public Health</td>\n      <td>Utilization of Mental and Behavioral Health Se...</td>\n    </tr>\n    <tr>\n      <th>11056</th>\n      <td>14107</td>\n      <td>The Mindful Pathway Initiative, spearheaded by...</td>\n      <td>Public Health</td>\n      <td>Mental and Behavioral Health</td>\n      <td>Utilization of Mental and Behavioral Health Se...</td>\n      <td>901.0</td>\n      <td>901</td>\n      <td>Mental and Behavioral Health</td>\n      <td>Public Health</td>\n      <td>Utilization of Mental and Behavioral Health Se...</td>\n    </tr>\n    <tr>\n      <th>11057</th>\n      <td>14108</td>\n      <td>The Mindful Meadows initiative is a comprehens...</td>\n      <td>Public Health</td>\n      <td>Mental and Behavioral Health</td>\n      <td>Utilization of Mental and Behavioral Health Se...</td>\n      <td>901.0</td>\n      <td>901</td>\n      <td>Mental and Behavioral Health</td>\n      <td>Public Health</td>\n      <td>Utilization of Mental and Behavioral Health Se...</td>\n    </tr>\n  </tbody>\n</table>\n<p>11058 rows × 10 columns</p>\n</div>"},"metadata":{}}],"execution_count":null}]}